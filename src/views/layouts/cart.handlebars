<!DOCTYPE html>
<html lang="es">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Carrito de Compras</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
</head>

<header>
    <nav class="navbar navbar-expand-lg navbar-light">
        <div class="container-fluid">
            <ul class="nav nav-pills ms-auto mb-3" id="pills-tab" role="tablist">
                <li class="nav-item" role="presentation">
                    <a class="nav-link active " id="pills-home-tab" data-bs-toggle="pill" data-bs-target="#pills-home"
                        type="button" role="tab" aria-controls="pills-home" aria-selected="true" href="/">Home</a>
                </li>

                <li class="nav-item hover" role="presentation">
                    <a class="nav-link" id="pills-profile-tab" data-bs-toggle="pill" data-bs-target="#pills-profile"
                        type="button" role="tab" aria-controls="pills-profile" href="/profile" aria-selected="false">Mi
                        perfil</a>
                </li>

                <li class="nav-item hover" role="presentation">
                    <a class="nav-link" id="pills-profile-tab" data-bs-toggle="pill" data-bs-target="#pills-profile"
                        type="button" role="tab" aria-controls="pills-profile" href="/productlist"
                        aria-selected="false">Productos</a>
                </li>

                <li class="nav-item hover" role="presentation">
                    <a class="nav-link" href="javascript:void(0);" onclick="logout('{{cart._id}}')"
                        aria-selected="false">Cerrar sesión</a>
                </li>
            </ul>
        </div>
    </nav>
</header>

<body>
    <h1 class="mt-5">Carrito de Compras:</h1>
    <div class="container mt-3">
        <div class="row">
            <div class="col-md-12">
                <table class="table">
                    <thead>
                        <tr>
                            <th scope="col">Producto</th>
                            <th scope="col">Cantidad</th>
                            <th scope="col">Precio Unitario</th>
                            <th scope="col">Total</th>
                        </tr>
                    </thead>
                    <tbody>
                        {{#each cart.products}}
                        <tr id="product-{{this.product._id}}">
                            <td>{{this.product.title}}</td>
                            <td>{{this.quantity}}</td>
                            <td>{{this.product.price}}</td>
                            <td>{{multiply this.product.price this.quantity}}</td>
                            <td>
                                <button class="btn btn-success"
                                    onclick="editarProducto('{{this.product._id}}', '{{../cart._id}}')">Editar</button>
                                <button class="btn btn-danger"
                                    onclick="eliminarProducto('{{../cart._id}}', '{{this.product._id}}')">Eliminar</button>
                            </td>

                        </tr>
                        {{/each}}
                    </tbody>
                </table>
                <div class="text-center">
                    <h3>Total: {{cart.total}}</h3>
                    <form method="POST" action="/api/carts/{{cart._id}}/purchase">
                        <div class="form-group">
                            <label for="email">Email:</label>
                            <input type="email" class="form-control" id="email" name="email" required>

                        </div>
                        <button type="submit" class="btn btn-primary">Proceder al Pago</button>
                    </form>
                    <button class="btn btn-danger" onclick="vaciarCarrito('{{cart._id}}')">Vaciar Carrito</button>

                </div>
            </div>
        </div>
    </div>


    <script>
        async function eliminarProducto(cartId, productId) {
            try {
                const response = await fetch(`/api/carts/${cartId}/product/${productId}`, {
                    method: 'DELETE'
                });
                if (response.ok) {
                    document.getElementById(`product-${productId}`).remove();
                } else {
                    throw new Error('Error al eliminar el producto del carrito');
                }
                location.reload();
            } catch (error) {
                console.error('Error:', error);
            }

        }

        async function vaciarCarrito(cartId) {
            try {
                const response = await fetch(`/api/carts/${cartId}`, {
                    method: 'DELETE'
                });

                if (!response.ok) {
                    throw new Error('Error al vaciar el carrito');
                }
                location.reload();

            } catch (error) {
                console.error('Error al vaciar el carrito:', error);
                alert('Error al vaciar el carrito');
            }
        }

        async function logout(cartId) {
            if (confirm('¿Está seguro de que desea cerrar sesión? Esto eliminará su carrito.')) {
                try {
                    const response = await fetch(`/api/carts/${cartId}`, {
                        method: 'DELETE'
                    });
                    if (!response.ok) {
                        throw new Error('Error al vaciar el carrito');
                    }
                    window.location.href = '/api/sessions/logout';
                } catch (error) {
                    console.error('Error al vaciar el carrito:', error);
                    alert('Error al vaciar el carrito');
                }
            }
        }

        async function editarProducto(productId, cartId) {
            const newQuantity = prompt('Ingrese la nueva cantidad:');
            if (newQuantity === null || isNaN(newQuantity) || newQuantity.trim() === '') {
                alert('Cantidad no válida');
                return;
            }
            try {
                const response = await fetch(`/api/carts/${cartId}/product/${productId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ quantity: parseInt(newQuantity, 10) })
                });

                if (!response.ok) {
                    throw new Error('Error al actualizar cantidades');
                }

                location.reload();
            } catch (error) {
                console.error('Error al actualizar cantidades:', error);
                alert('Error al actualizar cantidades en el carrito');
            }
        }

    </script>
</body>

</html>